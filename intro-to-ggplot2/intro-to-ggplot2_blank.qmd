---
title: "Introduction to ggplot2"
author: "Reiko Okamoto"
date: "`r Sys.Date()`"
format: gfm
editor: visual
execute:
  echo: true
---

## üé®Introduction to ggplot2

ggplot2 helps us create a wide range of static, informative, and visually appealing graphics. Its name comes from the Grammar of Graphics, which is a framework for building plots in a structured way. We can build a plot incrementally by adding layers like data points, axes, colours, and labels.

üíªLoad the necessary packages:

```{r}
# YOUR CODE HERE
```

## 1Ô∏è‚É£Explore the sample data

![](../imgs/antoine-schibler-H84rHbx7IP0-unsplash.jpg){fig-align="center" width="500"}

We'll use a data set sourced from a [GitHub repository](https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-02-26), which originally retrieved the data from the SNCF open data portal. SCNF, founded in 1938, is France's national railway company. It operates systems like the TGV high-speed trains and regional TER services.

üíªRead in the data using the [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function from the [readr](https://readr.tidyverse.org/) package:

```{r}
# YOUR CODE HERE
```

üß†Explore the type and description of each variable:

| Variable                  | Type      | Description                          |
|-----------------------|----------------|---------------------------------|
| `year`                    | double    | Year of observation                  |
| `month`                   | double    | Month of observation                 |
| `service`                 | character | Type of service                      |
| `departure_station`       | character | Departure station                    |
| `arrival_station`         | character | Arrival station                      |
| `journey_time_avg`        | double    | Average journey time (in minutes)    |
| `total_num_trips`         | double    | Total number of trips recorded       |
| `avg_delay_all_departing` | double    | Average departure delay (in minutes) |
| `avg_delay_all_arriving`  | double    | Average arrival delay (in minutes)   |
| `num_late_at_departure`   | double    | Number of trains that departed late  |
| `num_arriving_late`       | double    | Number of trains that arrived late   |

The data set contains **monthly summaries** of train journeys from 2015 to 2018. Each row represents aggregated data for a specific route and month, including average journey times, delays, and the total number of trips. This structure will allow us to explore trends over time and visualize overall patterns in train travel.

üíªInspect the first and last parts of the data set:

```{r}
# YOUR CODE HERE
```

-   The first row captures information on trips from "AIX EN PROVENCE TGV" to "PARIS LYON" for the month of January 2015

-   The last row captures information on trips from "ZURICH" to "PARIS LYON" for the month of November 2018

## 2Ô∏è‚É£Histograms

üíªCreate a histogram to visualize the distribution of average journey time:

```{r}
# YOUR CODE HERE
```

We can see that the distribution of average journey time is right-skewed.

Breaking down the code:

-   The first argument in [`ggplot()`](https://ggplot2.tidyverse.org/reference/ggplot.html) indicates which data frame we want to use.

-   The second argument, called the aesthetic mapping, specifies how the columns of the data frame should be mapped to different parts of the plot (e.g., x-axis, y-axis, colour, etc.).

-   We use the `+` operator to add each layer to the plot.

-   [`geom_histogram()`](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is a geometric object (or "geom") that decides how the mapped data is displayed‚Äîin this case, as a histogram.

## 3Ô∏è‚É£Scatter plots

Scatter plots are a powerful way to visualize the relationship between two continuous variables.

üíªCreate a scatter plot to visualize the relationship between the average journey time and the number of trains that departed late:

```{r}
# YOUR CODE HERE
```

Sometimes, when data points overlap too much, it can be challenging to see the individual points. This is called overplotting.

üíªTo address this, adjust the transparency of the points using the `alpha` argument:

```{r}
# YOUR CODE HERE
```

üíªMake the plot more visually appealing by changing the colour of the points and adding a title and axis labels:

```{r}
# YOUR CODE HERE
```

#### üìù**Exercise 1**

Create a scatter plot to visualize the relationship between two other continuous variables in the data. This time, change the default size of the points by using the `size` argument. The default size is 1.5, but we can increase or decrease this value to make the points bigger or smaller.

```{r}
# YOUR CODE HERE
```

## 4Ô∏è‚É£Bar plots

Bar plots are also commonly used in data analysis. They are particular useful for comparing values between different groups.

üíªCreate a bar plot to show the number of departures from "PARIS NORD" in 2015 by arrival station:

```{r}
# YOUR CODE HERE
```

Here, `stat = "identity"` tells ggplot2 to take the `n` column as it is and use it for the height of the bars.

üíªCreate a grouped bar plot to compare the number of departures from "PARIS NORD" in 2015 and 2016, by arrival station:

```{r}
# YOUR CODE HERE
```

Breaking down the code:

-   `as.factor(year)` changes the `year` variable from a numeric type to a categorical one, ensuring each year gets a distinct colour

-   The `fill` argument in `aes()` maps the `year` variable to the fill colour of the bars

-   `position = "dodge"` arranges the bars of the different years side by side within each `arrival_station` category, making it easier to compare values across years

üíªCustomize fill colours manually:

```{r}
# YOUR CODE HERE
```

Pre-made colour palettes, such as those from the [RColorBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) package, offer a variety of well-tested colour schemes that are often aesthetically pleasing. These palettes are useful for ensuring good contrast and consistency across visualizations.

üíªDisplay available palettes:

```{r}
# YOUR CODE HERE
```

üíªPick and apply a qualitative palette from RColorBrewer:

```{r}
# YOUR CODE HERE
```

In ggplot2, the `scale_{aesthetic}_{type}()` functions control how data values are mapped to aesthetic properties like colour and fill.

The `scale_fill_{type}()` functions adjust fill colours in plots where the `fill` aesthetic is mapped to a variable, such as in bar and box plots.

On the other hand, `scale_colour_{type}()` functions are used to adjust the colours of lines, points, or borders in plots where the `colour` aesthetic is mapped to a variable.

#### üìùExercise 2

Create a bar plot to show the number of departures from "NANTES" in 2018 by arrival station. Use the [`scale_fill_brewer()`](https://ggplot2.tidyverse.org/reference/scale_brewer.html) function to apply a qualitative palette accessible to colorblind viewers. Hint: You can call `display.brewer.allcolorblindFriendly=TRUE)` to retrieve a list of appropriate palettes.

```{r}
# YOUR CODE HERE
```

## 5Ô∏è‚É£Line plots

Line plots are useful in data analysis for visualizing trends over time.

üíªCreate a date column:

```{r}
# YOUR CODE HERE
```

üíªCreate a line plot to show how the monthly number of trips from "PARIS MONTPARNASSE" to "BREST" fluctuates over time:

```{r}
# YOUR CODE HERE
```

Instead of working with separate `year` and `month` columns, we create a single date column in the format `yyyy-mm‚Äì01` to handle the continuous time data. This results in smoother scaling, correct chronological ordering, and more precise formatting of the axis labels, making the time-based trends much cleaner.

üíªCreate a line plot to show how the monthly number of trips from "PARIS MONTPARNASSE" to multiple cities in Brittany (i.e., "RENNES", "BREST", "QUIMPER") fluctuates throughout the year:

```{r}
# YOUR CODE HERE
```

The `colour` argument in `aes()` maps the `arrival_station` variable to the line colours.

Fun fact: Rennes has the most frequent service because trains departing from Paris often separate in Rennes, with the first part going to Brest and the latter to Quimper (see map below).

![](../imgs/brittany_map.png){fig-align="center" width="400"}

üíªEnhance the existing line plot by by making the x-axis labels more detailed:

```{r}
# YOUR CODE HERE
```

The `date_labels` argument allows us to customize the format to show both the month and the year, while `date_breaks` sets the interval for the labels to appear every 4 months.

The `scale_x_{type}()` and `scale_y_{type}` functions allow us to customize how our data is represented on the axes. In addition to adjusting the label formats and placing breaks at specific intervals, it is also possible to transform scale transformations (e.g., log transformation) to better represent the data.

üíªFurther enhance the line plot by applying a different theme to change its overall look and feel:

```{r}
# YOUR CODE HERE
```

ggplot2 offers [various themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) that we can use to match the style we're aiming for.

## 6Ô∏è‚É£Saving our plots

```{r}
# YOUR CODE HERE
```

If we don't specify the `plot` argument, the function will save the last plot displayed by default.

## üìöResources

-   <https://www.data-to-viz.com/>

-   <http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization>

-   <https://ggplot2.tidyverse.org/reference/>

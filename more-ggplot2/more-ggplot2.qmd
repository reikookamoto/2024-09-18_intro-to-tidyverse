---
title: "More ggplot2"
author: Reiko Okamoto
date: "`r Sys.Date()`"
format: gfm
editor: visual
---

I can only fit so much into a three-hour workshop! In this document, we'll use the same data set of French train delays to explore additional features of ggplot2.

ðŸ’»Load the necessary packages:

```{r}
library(tidyverse)
```

ðŸ’»Read in the data:

```{r}
trains_df <- read_csv(here::here("french_trains.csv"))
trains_df
```

## ðŸ“ˆBox plots

Box plots are great for visualizing the distribution of a continuous variable across different categories.

ðŸ’»Create a box plot to show the distribution of average arrival delay across different journeys from "BORDEAUX ST JEAN":

```{r}
trains_df |> 
  filter(departure_station == "BORDEAUX ST JEAN") |> 
  ggplot(aes(x = arrival_station, y = avg_delay_all_arriving)) +
  geom_boxplot()
```

## ðŸ“ˆViolin plots

Violin plots are similar to box plots. However, violin plots reveal the full data distribution, unlike box plots, which only highly summary statistics like the median and interquartile range. This is especially helpful when the data has multiple peaks (i.e., multimodal distribution).

ðŸ’»Create a violin plot to show the distribution of average arrival delay across different journeys from "BORDEAUX ST JEAN":

```{r}
trains_df |> 
  filter(departure_station == "BORDEAUX ST JEAN") |> 
  ggplot(aes(x = arrival_station, y = avg_delay_all_arriving)) +
  geom_violin()
```

Note that we only had to change one line of code!

## ðŸ“ˆFacet plots

Facets allow us to break down a plot into smaller, related subplots.

ðŸ’»Create a line plot to show how the monthly number of trips from "PARIS MONTPARNASSE" to "RENNES" fluctuates over time. Use facets to organize the subplots by year, with a separate panel for each year:

```{r}
trains_df |> 
  filter(departure_station == "PARIS MONTPARNASSE",
         arrival_station == "RENNES") |> 
  ggplot(aes(x = month, y = total_num_trips)) +
  geom_line() +
  facet_wrap(~year)
  
```

## ðŸ“ˆModify components of a theme

Theme elements are non-data components of a plot, which include things like the background colour, text size, font, and grid lines. These changes don't alter the underlying data; rather, they adjust the appearance of the plot.

ðŸ’»Create a base plot:

```{r}
plt <- trains_df |> 
  ggplot(aes(x = avg_delay_all_departing, 
             y = avg_delay_all_arriving)) +
  geom_point(alpha = 0.2) +
  labs(
    title = "Relationship between departure and arrival delays",
    x = "Average departure delay (minutes)",
    y = "Average arrival delay (minutes)"
  )
```

ðŸ’»Modify the look and feel of your plot using the [`theme()`](https://ggplot2.tidyverse.org/reference/theme.html) function:

```{r}
plt +
  theme(
    plot.title = element_text(face = "bold", size = 16),    # Bold and larger title
    axis.title.x = element_text(size = 14, color = "red"),  # Red color and larger x-axis label
    axis.title.y = element_text(size = 14, color = "blue"), # Blue color and larger y-axis label
    plot.background = element_rect(fill = "green"),    # Green background
    panel.grid.major = element_line(color = "purple", size = 0.5) # Purple gridlines
  )
```

Note: In no way do I think this aesthetic makes the plot more visually appealing or easier to read. However, I hope it demonstrates just how customizable ggplot2 is ðŸ¤  For more information on what you can modify, check out this link: <https://ggplot2-book.org/themes#modifying-theme-components>
